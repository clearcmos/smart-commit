[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "smart-commit"
version = "2.1.0"
description = "AI-powered Git commit message generator with dual backend support"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Nicholas", email = "clearcmos@domain.com"}
]
keywords = ["git", "ai", "commit", "conventional-commits", "ollama", "llama-cpp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "click>=8.0.0",
    "rich>=13.0.0",
    "requests>=2.28.0",
    "GitPython>=3.1.0",
    "pydantic>=2.0.0",
    "loguru>=0.7.0",
    "typer>=0.9.0",
    "pydantic-settings>=2.0.0",
    "aiohttp>=3.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "ruff>=0.1.0",
]

[project.scripts]
smart-commit = "smart_commit.cli:main"
sc = "smart_commit.cli:main"

[project.urls]
Homepage = "https://github.com/clearcmos/smart-commit"
Repository = "https://github.com/clearcmos/smart-commit"
Issues = "https://github.com/clearcmos/smart-commit/issues"
Documentation = "https://github.com/clearcmos/smart-commit/blob/main/README.md"

[tool.hatch.build.targets.wheel]
packages = ["smart_commit"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["smart_commit"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=smart_commit --cov-report=term-missing --cov-report=html"

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.coverage.run]
source = ["smart_commit"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]