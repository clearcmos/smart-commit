#!/bin/bash

# Smart Commit Setup Script
# Sets up OLLAMA integration and installs smart-commit to system path

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if running as root
if [[ $EUID -eq 0 ]]; then
    echo -e "${RED}Error: This script should not be run as root.${NC}"
    echo "It will use sudo when necessary."
    exit 1
fi

# Detect OS
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
        SHELL_PROFILE="$HOME/.bashrc"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
        SHELL_PROFILE="$HOME/.zshrc"
    else
        echo -e "${RED}Error: Unsupported operating system: $OSTYPE${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}Detected OS: $OS${NC}"
    echo -e "${BLUE}Shell profile: $SHELL_PROFILE${NC}"
}

# Function to check if environment variable exists in shell profile
check_env_var() {
    local var_name="$1"
    if grep -q "^export $var_name=" "$SHELL_PROFILE" 2>/dev/null; then
        return 0
    else
        return 1
    fi
}

# Function to get current environment variable value
get_env_var() {
    local var_name="$1"
    grep "^export $var_name=" "$SHELL_PROFILE" 2>/dev/null | cut -d'=' -f2- | tr -d '"'
}

# Function to check if Ollama is installed
check_ollama_installed() {
    if command -v ollama >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Function to check if Ollama service is running
check_ollama_running() {
    if check_ollama_installed; then
        # Check if ollama is responding
        if curl -s --max-time 5 http://localhost:11434/api/tags >/dev/null 2>&1; then
            return 0
        fi
    fi
    return 1
}

# Function to check if qwen3:8b model is available
check_qwen3_model() {
    if check_ollama_running; then
        if curl -s http://localhost:11434/api/tags | grep -q '"qwen3:8b"'; then
            return 0
        fi
    fi
    return 1
}

# Function to install Ollama
install_ollama() {
    echo -e "${BLUE}Installing Ollama...${NC}"
    
    if [[ "$OS" == "macos" ]]; then
        # Check if Homebrew is available
        if command -v brew >/dev/null 2>&1; then
            echo -e "${YELLOW}Installing Ollama via Homebrew...${NC}"
            brew install ollama
        else
            echo -e "${YELLOW}Installing Ollama via curl...${NC}"
            curl -fsSL https://ollama.com/install.sh | sh
        fi
    elif [[ "$OS" == "linux" ]]; then
        echo -e "${YELLOW}Installing Ollama via curl...${NC}"
        curl -fsSL https://ollama.com/install.sh | sh
    fi
    
    if check_ollama_installed; then
        echo -e "${GREEN}Ollama installed successfully!${NC}"
    else
        echo -e "${RED}Failed to install Ollama${NC}"
        exit 1
    fi
}

# Function to start Ollama service
start_ollama_service() {
    echo -e "${BLUE}Starting Ollama service...${NC}"
    
    if [[ "$OS" == "macos" ]]; then
        # On macOS, try to start Ollama in the background
        nohup ollama serve >/dev/null 2>&1 &
        sleep 3
    elif [[ "$OS" == "linux" ]]; then
        # On Linux, start Ollama service
        if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl start ollama
            sudo systemctl enable ollama
        else
            nohup ollama serve >/dev/null 2>&1 &
            sleep 3
        fi
    fi
    
    # Wait for service to be ready
    local retries=10
    while [ $retries -gt 0 ]; do
        if check_ollama_running; then
            echo -e "${GREEN}Ollama service is running!${NC}"
            return 0
        fi
        sleep 2
        retries=$((retries - 1))
    done
    
    echo -e "${RED}Failed to start Ollama service${NC}"
    return 1
}

# Function to download qwen3:8b model
download_qwen3_model() {
    echo -e "${BLUE}Downloading qwen3:8b model (this may take several minutes)...${NC}"
    
    if ollama pull qwen3:8b; then
        echo -e "${GREEN}qwen3:8b model downloaded successfully!${NC}"
    else
        echo -e "${RED}Failed to download qwen3:8b model${NC}"
        exit 1
    fi
}

# Function to add or update environment variable in shell profile
add_env_var() {
    local var_name="$1"
    local var_value="$2"
    
    if check_env_var "$var_name"; then
        echo -e "${YELLOW}$var_name already exists in $SHELL_PROFILE${NC}"
        read -p "Do you want to update it? (y/N): " update_var
        if [[ $update_var =~ ^[Yy]$ ]]; then
            # Remove existing line and add new one
            # Use grep -v for cross-platform compatibility
            grep -v "^export $var_name=" "$SHELL_PROFILE" > "$SHELL_PROFILE.tmp" && mv "$SHELL_PROFILE.tmp" "$SHELL_PROFILE"
            echo "export $var_name=\"$var_value\"" >> "$SHELL_PROFILE"
            echo -e "${GREEN}Updated $var_name in $SHELL_PROFILE${NC}"
        else
            echo -e "${YELLOW}Keeping existing $var_name${NC}"
        fi
    else
        echo "export $var_name=\"$var_value\"" >> "$SHELL_PROFILE"
        echo -e "${GREEN}Added $var_name to $SHELL_PROFILE${NC}"
    fi
}

# Function to display current configuration status
show_current_config() {
    echo
    echo -e "${BLUE}Current Configuration Status${NC}"
    echo "============================"
    
    if check_env_var "OLLAMA_API_URL"; then
        local current_url=$(get_env_var "OLLAMA_API_URL")
        local current_model=$(get_env_var "OLLAMA_MODEL")
        echo -e "${GREEN}✓${NC} Configuration found:"
        echo -e "  API URL: ${YELLOW}$current_url${NC}"
        echo -e "  Model: ${YELLOW}$current_model${NC}"
        
        if [[ "$current_url" == "http://localhost:11434" ]]; then
            echo -e "  Type: ${YELLOW}Local Ollama${NC}"
            if check_ollama_running; then
                echo -e "  Status: ${GREEN}✓ Running${NC}"
                if check_qwen3_model; then
                    echo -e "  Model Status: ${GREEN}✓ qwen3:8b available${NC}"
                else
                    echo -e "  Model Status: ${RED}✗ qwen3:8b not found${NC}"
                fi
            else
                echo -e "  Status: ${RED}✗ Not running${NC}"
            fi
        else
            echo -e "  Type: ${YELLOW}Remote Ollama${NC}"
        fi
    else
        echo -e "${RED}✗${NC} No configuration found"
    fi
    echo
}

# Function to setup local Ollama
setup_local_ollama() {
    echo -e "${BLUE}Setting up Local Ollama...${NC}"
    
    # Check if Ollama is already installed
    if check_ollama_installed; then
        echo -e "${GREEN}✓ Ollama is already installed${NC}"
    else
        install_ollama
    fi
    
    # Check if Ollama service is running
    if check_ollama_running; then
        echo -e "${GREEN}✓ Ollama service is already running${NC}"
    else
        start_ollama_service
    fi
    
    # Check if qwen3:8b model is available
    if check_qwen3_model; then
        echo -e "${GREEN}✓ qwen3:8b model is already available${NC}"
    else
        download_qwen3_model
    fi
    
    # Set up environment variables for local Ollama
    local api_url="http://localhost:11434"
    local model="qwen3:8b"
    
    echo -e "${BLUE}Setting up environment variables...${NC}"
    add_env_var "OLLAMA_API_URL" "$api_url"
    add_env_var "OLLAMA_MODEL" "$model"
    
    # Set macOS local optimization flag
    if [[ "$OS" == "macos" ]]; then
        add_env_var "SMART_COMMIT_MACOS_LOCAL" "true"
        echo -e "${YELLOW}Enabled macOS local optimization for better performance${NC}"
    fi
    
    echo -e "${GREEN}Local Ollama setup complete!${NC}"
    echo -e "${YELLOW}API URL: $api_url${NC}"
    echo -e "${YELLOW}Model: $model${NC}"
}

# Function to setup remote Ollama
setup_remote_ollama() {
    echo -e "${BLUE}Setting up Remote Ollama server...${NC}"
    read -p "Enter the IP address of your OLLAMA server (e.g., 192.168.1.2): " remote_ip
    
    # Validate IP address format (basic validation)
    if [[ ! $remote_ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        echo -e "${RED}Error: Invalid IP address format${NC}"
        exit 1
    fi
    
    local api_url="http://$remote_ip:11434"
    local model="qwen3:8b"
    
    echo -e "${BLUE}Testing connection to remote server...${NC}"
    if curl -s --max-time 10 "$api_url/api/tags" >/dev/null 2>&1; then
        echo -e "${GREEN}✓ Successfully connected to remote Ollama server${NC}"
    else
        echo -e "${YELLOW}⚠ Warning: Could not connect to remote server (this is normal if the server is not running yet)${NC}"
    fi
    
    echo -e "${BLUE}Setting up environment variables...${NC}"
    add_env_var "OLLAMA_API_URL" "$api_url"
    add_env_var "OLLAMA_MODEL" "$model"
    
    echo -e "${GREEN}Remote Ollama setup complete!${NC}"
    echo -e "${YELLOW}API URL: $api_url${NC}"
    echo -e "${YELLOW}Model: $model${NC}"
}

# Function to setup OLLAMA integration
setup_ollama() {
    echo
    echo -e "${BLUE}OLLAMA Integration Setup${NC}"
    echo "========================"
    
    # Show current configuration status
    show_current_config
    
    echo "Choose your OLLAMA integration type:"
    echo "1) Local Ollama (install and run locally)"
    echo "2) Remote Ollama server (connect to existing server)"
    echo "3) Keep current configuration (if any)"
    echo
    
    read -p "Enter your choice (1-3): " ollama_choice
    
    case $ollama_choice in
        1)
            setup_local_ollama
            ;;
        2)
            setup_remote_ollama
            ;;
        3)
            if check_env_var "OLLAMA_API_URL"; then
                echo -e "${GREEN}Keeping current configuration${NC}"
                local current_url=$(get_env_var "OLLAMA_API_URL")
                local current_model=$(get_env_var "OLLAMA_MODEL")
                echo -e "${YELLOW}API URL: $current_url${NC}"
                echo -e "${YELLOW}Model: $current_model${NC}"
            else
                echo -e "${RED}No current configuration found. Please choose option 1 or 2.${NC}"
                setup_ollama
            fi
            ;;
        *)
            echo -e "${RED}Error: Invalid choice${NC}"
            exit 1
            ;;
    esac
}

# Function to install smart-commit to system path
install_smart_commit() {
    echo
    echo -e "${BLUE}Installing smart-commit to system path...${NC}"
    
    # Check if smart-commit.sh exists
    if [[ ! -f "smart-commit.sh" ]]; then
        echo -e "${RED}Error: smart-commit.sh not found in current directory${NC}"
        exit 1
    fi
    
    # Copy to /usr/local/bin with sudo
    echo -e "${YELLOW}Copying smart-commit to /usr/local/bin/ (requires sudo)...${NC}"
    sudo cp smart-commit.sh /usr/local/bin/smart-commit
    sudo chmod +x /usr/local/bin/smart-commit
    
    echo -e "${GREEN}smart-commit installed successfully!${NC}"
    echo -e "${YELLOW}You can now use 'smart-commit' from anywhere in your system.${NC}"
}

# Main setup function
main() {
    echo -e "${GREEN}Smart Commit Setup${NC}"
    echo "=================="
    echo
    
    # Detect OS and set shell profile
    detect_os
    
    # Create shell profile if it doesn't exist
    if [[ ! -f "$SHELL_PROFILE" ]]; then
        touch "$SHELL_PROFILE"
        echo -e "${YELLOW}Created $SHELL_PROFILE${NC}"
    fi
    
    # Setup OLLAMA integration
    setup_ollama
    
    # Install smart-commit to system path
    install_smart_commit
    
    echo
    echo -e "${GREEN}Setup completed successfully!${NC}"
    echo
    echo -e "${YELLOW}Important: Reload your shell or run 'source $SHELL_PROFILE' to use the new environment variables.${NC}"
    echo -e "${YELLOW}Then you can use 'smart-commit' from any git repository.${NC}"
    echo
    echo "Usage examples:"
    echo "  smart-commit              # Analyze changes and commit"
    echo "  smart-commit --dry-run    # Preview commit message without committing"
    echo "  smart-commit --full       # Generate detailed commit message without length limits"
    echo "  smart-commit --help       # Show help"
}

# Run main function
main "$@"